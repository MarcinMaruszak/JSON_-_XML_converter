type: edu
custom_name: stage3
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {
        public ConverterTest() {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <nonattr />\n" +
                    "    <nonattr></nonattr>\n" +
                    "    <nonattr>text</nonattr>\n" +
                    "    <attr id=\"1\" />\n" +
                    "    <attr id=\"2\"></attr>\n" +
                    "    <attr id=\"3\">text</attr>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = null\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"text\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"text\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );

            allTests.put(
                "<node>\n" +
                    "    <child name = \"child_name1\" type = \"child_type1\">\n" +
                    "        <subchild id = \"1\" auth=\"auth1\">Value1</subchild>\n" +
                    "    </child>\n" +
                    "    <child name = \"child_name2\" type = \"child_type2\">\n" +
                    "        <subchild id = \"2\" auth=\"auth1\">Value2</subchild>\n" +
                    "        <subchild id = \"3\" auth=\"auth2\">Value3</subchild>\n" +
                    "        <subchild id = \"4\" auth=\"auth3\"></subchild>\n" +
                    "        <subchild id = \"5\" auth=\"auth3\"/>\n" +
                    "    </child>\n" +
                    "</node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<node><child name=\"child_name1\" type=\"chil" +
                    "d_type1\"><subchild id=\"1\" auth=\"auth1\">" +
                    "Value1</subchild></child><child name=\"child" +
                    "_name2\" type=\"child_type2\"><subchild id=\"" +
                    "2\" auth=\"auth1\">Value2</subchild><subchil" +
                    "d id=\"3\" auth=\"auth2\">Value3</subchild><s" +
                    "ubchild id=\"4\" auth=\"auth3\"></subchild><su" +
                    "bchild id=\"5\" auth=\"auth3\"/></child></node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-999-00-00</number>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-999-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));
                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            List<String> userLines = user
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            List<String> answerLines = answer
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (userLines.size() < answerLines.size()) {

                LinkedHashSet<String> answerSet = new LinkedHashSet<>();
                answerSet.addAll(answerLines);
                for (String line : userLines) {
                    answerSet.remove(line);
                }
                if (!answerSet.isEmpty()) {
                    String notFoundLine = answerSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not found in output:\n" + notFoundLine);
                }
                return new CheckResult(false);

            } else if (userLines.size() > answerLines.size()) {

                LinkedHashSet<String> userSet = new LinkedHashSet<>();
                userSet.addAll(answerLines);
                for (String line : answerLines) {
                    userSet.remove(line);
                }
                if (!userSet.isEmpty()) {
                    String excessLine = userSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not needed in output:\n" + excessLine);
                }
                return new CheckResult(false);

            } else {

                for (int i = 0; i < userLines.size(); i++) {

                    String userLine = userLines.get(i);
                    String answerLine = answerLines.get(i);

                    if (!userLine.equals(answerLine)) {
                        return new CheckResult(false,
                            "The following line was expected:\n" + answerLine + "\n" +
                                "The following line was given:\n" + userLine);
                    }
                }

                return CheckResult.correct();
            }
        }
    }
  learner_created: false
- name: src/converter/logic/Converter.java
  visible: true
  text: |
    package converter.logic;

    import converter.domain.Object;

    import java.util.ArrayList;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public abstract class Converter {
        protected ArrayList<String> inputArray;
        protected Matcher matcher;
        protected Pattern pattern;
        protected Object object;

        public Converter() {
            object  = new Object();
            inputArray=new ArrayList<>();
        }

        public void setInputArray(ArrayList<String> inputArray) {
            this.inputArray = inputArray;
        }

        public abstract void convertToObject();

        public void printAsXML(){
            System.out.println("<"+object.getName()
                    +(object.getAttributesMap().isEmpty()?"":""+object.mapToXMLString())
                    +(object.getValue().equals("null")?"/>":(">"+ object.getValue())+"</"+ object.getName()+">"));
        }

        public void printASJSON(){
            System.out.println(object.getAttributesMap().isEmpty()?("{\""+object.getName()+"\":\""+object.getValue()+"\"}")
                    :("{\n" +
                    "\t\""+ object.getName()+"\" : {\n" +
                    object.mapToJSONString()+
                    "\t\t\"#"+ object.getName()+"\" : "+(object.getValue().equals("null")?"null":"\""+object.getValue()+"\"\n")+
                    "\t}\n}"));
        }

    }
  learner_created: true
- name: src/converter/logic/JSONConverter.java
  visible: true
  text: |
    package converter.logic;

    import java.util.regex.Pattern;

    public class JSONConverter extends Converter {

        @Override
        public void convertToObject() {

            for (String input : inputArray) {
                pattern = Pattern.compile("\"([#|@]?\\w+)\" : ([\"]?(.+?)([\"|,]|$)|null|\\{)");
                matcher = pattern.matcher(input);
                if (matcher.find()) {
                    /*for(int i =0;i<=matcher.groupCount();i++){
                        System.out.println(matcher.group(i));
                    }
                    System.out.println();*/
                    String group1 = matcher.group(1);
                    if(group1.startsWith("@")){
                        group1=group1.replaceFirst("@","");
                        object.getAttributesMap().put(group1,matcher.group(3));
                    }else if(group1.startsWith("#")){
                        //group1=group1.replaceFirst("#","");
                        object.setValue(matcher.group(3)==null?"null":matcher.group(3));
                    }else {
                        object.setName(group1);
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/converter/logic/ConverterMethod.java
  visible: true
  text: |
    package converter.logic;

    public class ConverterMethod{
        Converter converter;

        public void setConverter(Converter converter) {
            this.converter = converter;
        }

        public Converter getConverter() {
            return converter;
        }

        public void convertToObject(){
            converter.convertToObject();
        }

        public void printAsXML(){
            converter.printAsXML();
        }

        public void  printASJSON(){
            converter.printASJSON();
        }

    }
  learner_created: true
- name: src/converter/UserInterface/UI.java
  visible: true
  text: |
    package converter.UserInterface;

    import converter.logic.ConverterMethod;
    import converter.logic.JSONConverter;
    import converter.logic.XMLConverter;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class UI {
        private Scanner scanner;
        private final ConverterMethod converterMethod;

        public UI() {
            try {
                this.scanner = new Scanner(new File("test.txt"));
            } catch (FileNotFoundException e) {
                //e.printStackTrace();
                System.out.println("no file found");
                this.scanner=null;
            }
            converterMethod = new ConverterMethod();
        }

        public void start() {
            ArrayList<String> inputArray = new ArrayList<>();
            String input;
            while (scanner.hasNextLine()){
                input= scanner.nextLine();
                inputArray.add(input);
            }
            scanner.close();


            if(inputArray.get(0).contains("{")){
                converterMethod.setConverter(new JSONConverter());
                converterMethod.getConverter().setInputArray(inputArray);
                converterMethod.convertToObject();
                converterMethod.printAsXML();
            }else {
                converterMethod.setConverter(new XMLConverter());
                converterMethod.getConverter().setInputArray(inputArray);
                converterMethod.convertToObject();
                converterMethod.printASJSON();
            }
        }
    }
  learner_created: true
- name: src/converter/domain/Element.java
  visible: true
  text: |
    package converter.domain;

    import java.util.HashMap;

    public class Object {
        private String name;
        private String  value;
        private HashMap<String,  String> attributesMap;

        public Object() {
            value="null";
            attributesMap =  new HashMap<>( );
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public String getName() {
            return name;
        }

        public String getValue() {
            return value;
        }

        public HashMap<String, String> getAttributesMap() {
            return attributesMap;
        }

        public void addToMap(String  key, String  value){
            attributesMap.putIfAbsent(key,value);
        }

        public String mapToXMLString(){
            StringBuilder stringBuilder = new StringBuilder();
            for(String key : attributesMap.keySet()){
                stringBuilder.append(" ").append(key).append(" = \"").append(attributesMap.get(key)).append("\"");
            }
            return stringBuilder.toString();
        }

        public String mapToJSONString(){
            StringBuilder stringBuilder = new StringBuilder();
            for(String key : attributesMap.keySet()){
                stringBuilder.append("\t\t\"@").append(key).append("\" : \"").append(attributesMap.get(key)).append("\",\n");
            }
            return stringBuilder.toString();
        }

    }
  learner_created: true
- name: src/converter/logic/XMLConverter.java
  visible: true
  text: |
    package converter.logic;

    import java.util.regex.Pattern;

    public class XMLConverter extends Converter {

        @Override
        public void convertToObject() {

            for (String input : inputArray) {
                pattern = Pattern.compile("<(\\w+)( .+)?>(.*)</\\w+>|<(\\w+) (.+) />");
                matcher = pattern.matcher(input);

                if (matcher.find()) {
                    if (matcher.group(1)==null) {
                        object.setName(matcher.group(4));
                        object.setValue("null");
                        parseAttributes(matcher.group(5));

                    } else {
                        object.setName(matcher.group(1));
                        object.setValue(matcher.group(3));
                        if(matcher.group(2)!=null){
                            parseAttributes(matcher.group(2));
                        }
                    }
                }
            }
        }

        private void parseAttributes(String s){
             pattern  = Pattern.compile("(\\w+ = \".+?\")");
             matcher=pattern.matcher(s);
             while (matcher.find()) {
                 String [] array = matcher.group(1).split(" = ");
                 object.addToMap(array[0], array[1].replaceAll("\"",""));
             }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/61/stages/331/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/61/stages/331/implement">JetBrains
    Academy</a>
  time: Sat, 21 Nov 2020 20:09:07 UTC
record: 3
